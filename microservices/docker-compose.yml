version: "3.3"
services:

  tint:
    build:
      context: tint
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8012:8012

  postgres:
    image: postgres:14
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - "./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql"
    ports:
      - 127.0.0.1:5432:5432

  nginx:
    image: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/usersfile:/usersfile
    ports:
      - 127.0.0.1:80:80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pipeline.rule=Host(`titan-inside.disco.unimib.it`)"
      - "traefik.http.routers.pipeline.entrypoints=websecure"
      - "traefik.http.routers.pipeline.tls.certresolver=myresolver"
      - "traefik.http.routers.pipeline.tls=true"

  mongo:
    image: mongo:4.4.6 # mongo 5 requires cpu supports AVX
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_ROOT_PASSWORD
      MONGO_INITDB_DATABASE: main
      MONGO_INITDB_USERNAME: usr
      MONGO_INITDB_PASSWORD: $MONGO_PASSWORD
    ports:
      - 127.0.0.1:27017:27017
    volumes:
      - ./mongo/data:/data/db
      - ./mongo/initdb.d:/docker-entrypoint-initdb.d/

  documents:
    build: documents
    ports:
      - 127.0.0.1:30900:3001
    volumes:
      - ./documents/.env:/app/.env
      - ./documents/src:/app/src

  biencoder:
    image: rpozzi/ibkp_biencoder
    # build:
    #   context: ./biencoder
    #   dockerfile: Dockerfile
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/models:/home/app/models
    ports:
      - 127.0.0.1:30300:80
    environment:
      - PYTHONPATH=/home/app
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]
    command: python main.py --host 0.0.0.0 --port 80 --biencoder_model models/itabig/biencoder_hard_for_real/epoch_0/pytorch_model.bin --biencoder_config models/itabig/biencoder_hard_for_real/epoch_0/config.json

  indexer:
    image: rpozzi/ibkp_indexer
    # build:
    #     context: ./indexer
    #     dockerfile: Dockerfile
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/models:/home/app/models
    ports:
      - 127.0.0.1:30301:80
    depends_on:
      - postgres
    command: python main.py --host 0.0.0.0 --port 80 --index hnsw:models/faiss_hnsw_itahard_index_130.pkl:130:r,flat:models/flat_kbp_133.pkl:133:rw --postgres 'postgres://postgres:$POSTGRES_PASSWORD@postgres:5432/postgres' --vector-size 768 --language it

  nilcluster:
    image: rpozzi/ibkp_nilcluster
    # build:
    #     context: ./nilcluster
    #     dockerfile: Dockerfile
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/models:/home/app/models
    ports:
      - 127.0.0.1:30305:80
    environment:
      - PYTHONPATH=/path/to/EntityClustering
    command: python __main__.py --host 0.0.0.0 --port 80

  nilpredictor:
    image: rpozzi/ibkp_nilpredictor
    # build:
    #     context: ./nilpredictor
    #     dockerfile: Dockerfile
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/models:/home/app/models
    ports:
      - 127.0.0.1:30303:80
    command: python __main__.py --host 0.0.0.0 --port 80 --nil-bi-model models/nilp_under_bi_max_levenshtein_jaccard_model.pickle --nil-bi-features 'max_bi,levenshtein,jaccard'

  pipeline:
    build: pipelinehelper
    ports:
      - 127.0.0.1:30315:80
    command: python __main__.py --host 0.0.0.0 --port 80 --api-baseurl http://nginx
    environment:
      AUTH_USER: pipeline
      AUTH_PASSWORD: $PIPELINE_PASSWORD

    # not used
    # recognition:
    #   build:
    #       context: ./recognition
    #       dockerfile: Dockerfile
    #   expose:
    #     - 30303
    #   ports:
    #     - 30303:80
    #   command: python -m microservices.nilpredictor --host 0.0.0.0 --port 80 --nil-bi-model output/feature_ablation_study_ita/max_leve_model.pickle --nil-bi-features 'max_bi,levenshtein'
  spacyner:
    build:
        context: ./spacyner
        dockerfile: Dockerfile
        args:
          SPACY_MODEL: $SPACY_MODEL
    ports:
      - 30304:80
    command: python __main__.py --host 0.0.0.0 --port 80 --model $SPACY_MODEL --tint http://tint:8012/tint

  traefik:
    image: "traefik:v2.4"
    # command:
      # - "--log.level=DEBUG"
    ports:
      - 0.0.0.0:443:443
    volumes:
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml"
      - "./traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

