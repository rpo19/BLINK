version: "3.3"
services:

  tint:
    build:
      context: tint
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8012:8012

  postgres:
    image: postgres:14
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - "./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql"
    ports:
      - 127.0.0.1:5432:5432

  mongo:
    image: mongo:4.4.6 # mongo 5 requires cpu supports AVX
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_ROOT_PASSWORD
      MONGO_INITDB_DATABASE: main
      MONGO_INITDB_USERNAME: usr
      MONGO_INITDB_PASSWORD: $MONGO_PASSWORD
    ports:
      - 127.0.0.1:27017:27017
    volumes:
      - ./mongo/data:/data/db
      - ./mongo/initdb.d:/docker-entrypoint-initdb.d/

  documents:
    build: documents
    ports:
      - 127.0.0.1:30900:3001
    volumes:
      - ./documents/.env:/app/.env
      - ./documents/src:/app/src

  biencoder:
    image: rpozzi/ibkp_biencoder
    # build:
    #   context: ./biencoder
    #   dockerfile: Dockerfile
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/models:/home/app/models
    ports:
      - 127.0.0.1:30300:80
    environment:
      - PYTHONPATH=/home/app
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]
    command: python main.py --host 0.0.0.0 --port 80 --biencoder_model $BIENCODER_MODEL --biencoder_config $BIENCODER_CONFIG

  indexer:
    image: rpozzi/ibkp_indexer
    # build:
    #     context: ./indexer
    #     dockerfile: Dockerfile
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/models:/home/app/models
    ports:
      - 127.0.0.1:30301:80
    depends_on:
      - postgres
    command: python main.py --host 0.0.0.0 --port 80 --index $INDEXER_INDEX --postgres 'postgres://postgres:$POSTGRES_PASSWORD@postgres:5432/postgres' --vector-size $INDEXER_VECTOR_SIZE --language $INDEXER_LANGUAGE

  nilcluster:
    image: rpozzi/ibkp_nilcluster
    # build:
    #     context: ./nilcluster
    #     dockerfile: Dockerfile
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/models:/home/app/models
    ports:
      - 127.0.0.1:30305:80
    environment:
      - PYTHONPATH=/path/to/EntityClustering
    command: python __main__.py --host 0.0.0.0 --port 80

  nilpredictor:
    image: rpozzi/ibkp_nilpredictor
    # build:
    #     context: ./nilpredictor
    #     dockerfile: Dockerfile
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/models:/home/app/models
    ports:
      - 127.0.0.1:30303:80
    command: python __main__.py --host 0.0.0.0 --port 80 $NILPREDICTOR_ARGS

  pipeline:
    build: pipelinehelper
    ports:
      - 127.0.0.1:30315:80
    command: python __main__.py --host 0.0.0.0 --port 80 --api-baseurl http://$LOCAL_IP
    environment:
      AUTH_USER: pipeline
      AUTH_PASSWORD: $PIPELINE_PASSWORD

    # not used
    # recognition:
    #   build:
    #       context: ./recognition
    #       dockerfile: Dockerfile
    #   expose:
    #     - 30303
    #   ports:
    #     - 30303:80
    #   command: python -m microservices.nilpredictor --host 0.0.0.0 --port 80 --nil-bi-model output/feature_ablation_study_ita/max_leve_model.pickle --nil-bi-features 'max_bi,levenshtein'
  spacyner:
    build:
        context: ./spacyner
        dockerfile: Dockerfile
        args:
          SPACY_MODEL: $SPACY_MODEL
    ports:
      - 30304:80
    command: python __main__.py --host 0.0.0.0 --port 80 --model $SPACY_MODEL --tint http://tint:8012/tint

  caddy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/pwdfile:/etc/caddy/pwdfile
      - ./caddy/site:/srv
      - ./caddy/data:/data
      - ./caddy/config:/config
    environment:
      # fully qualified domain name
      FQDN: "$FQDN"
      LOCAL_IP: "$LOCAL_IP"
